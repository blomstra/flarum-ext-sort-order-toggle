{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@blomstra/sort-order-toggle/webpack/bootstrap","webpack://@blomstra/sort-order-toggle/webpack/runtime/compat get default export","webpack://@blomstra/sort-order-toggle/webpack/runtime/define property getters","webpack://@blomstra/sort-order-toggle/webpack/runtime/hasOwnProperty shorthand","webpack://@blomstra/sort-order-toggle/webpack/runtime/make namespace object","webpack://@blomstra/sort-order-toggle/external root \"flarum.core.compat['common/extend']\"","webpack://@blomstra/sort-order-toggle/external root \"flarum.core.compat['forum/app']\"","webpack://@blomstra/sort-order-toggle/external root \"flarum.core.compat['forum/components/IndexPage']\"","webpack://@blomstra/sort-order-toggle/external root \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@blomstra/sort-order-toggle/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@blomstra/sort-order-toggle/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@blomstra/sort-order-toggle/external root \"flarum.core.compat['common/Component']\"","webpack://@blomstra/sort-order-toggle/external root \"flarum.core.compat['common/components/Button']\"","webpack://@blomstra/sort-order-toggle/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@blomstra/sort-order-toggle/./src/forum/utils/apiSortReverse.ts","webpack://@blomstra/sort-order-toggle/./src/forum/components/SortDirectionToggler.tsx","webpack://@blomstra/sort-order-toggle/external root \"flarum.core.compat['common/components/Dropdown']\"","webpack://@blomstra/sort-order-toggle/./src/forum/components/SortDropdown.ts","webpack://@blomstra/sort-order-toggle/./src/forum/components/index.ts","webpack://@blomstra/sort-order-toggle/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/IndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/DiscussionListState'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","/**\n * Converts a \"positive\" REST API sort parameter to its opposite \"negative\" and vise-versa\n * @param sort\n */\nexport default function (sort: string) {\n  return sort.startsWith('-') ? sort.substring(1) : '-' + sort;\n}\n","import Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport classList from 'flarum/common/utils/classList';\nimport app from 'flarum/forum/app';\nimport apiSortReverse from '../utils/apiSortReverse';\n\nexport class SortDirectionToggler extends Component {\n  view() {\n    const sortDirection = this.getSortDirection();\n\n    return (\n      <Button\n        class={classList([\n          'Button',\n          'Button--icon',\n          'Blomstra-SortDirectionToggle',\n          {\n            active: this.isExtendedSortField(),\n            disabled: !this.oppositeFrontendSort(),\n          },\n        ])}\n        onclick={this.toggleSortDirection.bind(this)}\n        aria-label={app.translator.trans(`blomstra-sort-order-toggle.forum.sort-toggle.${sortDirection}-label`)}\n        icon={sortDirection === 'desc' ? 'fas fa-sort-amount-down' : 'fas fa-sort-amount-up'}\n      />\n    );\n  }\n\n  protected getApiSort(): string {\n    const { sort } = app.search.params();\n\n    let apiSort = sort && app.discussions.extendedSortMap()[sort];\n\n    if (!apiSort) {\n      // If no explicit sort option was provided, we will take the first one in the original sortMap\n      // it's important to use sortMap and not extendedSortMap because extensions might customize the order in sortMap to indicate a new default\n      apiSort = Object.values(app.discussions.sortMap())[0];\n    }\n\n    return apiSort;\n  }\n\n  getSortDirection(): 'asc' | 'desc' {\n    return this.getApiSort().startsWith('-') ? 'desc' : 'asc';\n  }\n\n  isExtendedSortField(): boolean {\n    const { sort } = app.search.params();\n\n    return sort && !app.discussions.sortMap()[sort] && app.discussions.extendedSortMap()[sort];\n  }\n\n  oppositeFrontendSort(): string | null {\n    const currentApiSort = this.getApiSort();\n\n    const newApiSort = apiSortReverse(currentApiSort);\n\n    const sortMap = app.discussions.extendedSortMap();\n\n    let newFrontendSort: string | null = null;\n\n    for (let sortParam in sortMap) {\n      if (sortMap[sortParam] === newApiSort) {\n        newFrontendSort = sortParam;\n        break;\n      }\n    }\n\n    return newFrontendSort;\n  }\n\n  toggleSortDirection() {\n    const newFrontendSort = this.oppositeFrontendSort();\n\n    // Shouldn't happen because the button will be disabled\n    if (!newFrontendSort) {\n      return;\n    }\n\n    app.search.changeSort(newFrontendSort);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Dropdown'];","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport Dropdown from 'flarum/common/components/Dropdown';\nimport apiSortReverse from '../utils/apiSortReverse';\n\n/**\n * A drop-in replacement for Flarum's native sort dropdown\n * Ours need to handle the special case of sort options that aren't actually visible in the dropdown itself\n */\nexport default class SortDropdown extends Component {\n  view() {\n    const sortMap = app.discussions.sortMap();\n\n    const sortOptions = Object.keys(sortMap).reduce((acc, sortId) => {\n      acc[sortId] = app.translator.trans(`core.forum.index_sort.${sortId}_button`);\n      return acc;\n    }, {});\n\n    const activeSortFrontendKey = app.search.params().sort;\n\n    let label = sortOptions[activeSortFrontendKey] || Object.keys(sortMap).map((key) => sortOptions[key])[0];\n\n    const mappingInExtended = app.discussions.extendedSortMap()[activeSortFrontendKey];\n\n    // If the currently active sort is present in the extended map but not the default map, we will use a custom label\n    if (mappingInExtended && sortMap[activeSortFrontendKey] !== mappingInExtended) {\n      const reverse = apiSortReverse(mappingInExtended);\n\n      // This shouldn't happen, unless you manually type a REST sort option in the URL which has neither positive or negative entry in the map\n      label = 'N/A';\n\n      for (let sortParam in sortMap) {\n        if (sortMap[sortParam] === reverse) {\n          label = sortOptions[sortParam];\n          break;\n        }\n      }\n\n      if (label === 'N/A') {\n        console.warn('Could not find a label for REST sort ' + reverse);\n      }\n    }\n\n    return Dropdown.component(\n      {\n        buttonClassName: 'Button',\n        label,\n        accessibleToggleLabel: app.translator.trans('core.forum.index_sort.toggle_dropdown_accessible_label'),\n      },\n      Object.keys(sortOptions).map((value) => {\n        const label = sortOptions[value];\n        const active = (activeSortFrontendKey || Object.keys(sortMap)[0]) === value;\n\n        return Button.component(\n          {\n            icon: active ? 'fas fa-check' : true,\n            onclick: app.search.changeSort.bind(app.search, value),\n            active: active,\n          },\n          label\n        );\n      })\n    );\n  }\n}\n","import { SortDirectionToggler } from './SortDirectionToggler';\n\nexport const components = {\n  SortDirectionToggler,\n};\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\n\nimport ItemList from 'flarum/common/utils/ItemList';\nimport IndexPage from 'flarum/forum/components/IndexPage';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\n\nimport type Mithril from 'mithril';\nimport { SortDirectionToggler } from './components/SortDirectionToggler';\nimport SortDropdown from './components/SortDropdown';\n\nexport * from './components';\n\napp.initializers.add('blomstra/sort-order-toggle', () => {\n  extend(IndexPage.prototype, 'viewItems', function (items: ItemList<Mithril.Children>) {\n    if ((app.current.data as any).routeName === 'byobuPrivate' || !items.has('sort')) return;\n\n    items.add('sortDirectionToggle', <SortDirectionToggler />, 100);\n\n    items.setContent('sort', <SortDropdown />);\n  });\n\n  // We can't just extend the original sortMap because some parts of the UI including the sort dropdown use it to build their options\n  // We'll create a separate method than can be used only internally for the URL to REST mapping\n  DiscussionListState.prototype.extendedSortMap = function () {\n    const map: any = {};\n\n    // The relevance sort probably won't be needed since we always fallback to sortMap which will contain it\n    // But we keep it here for consistency in case other extensions call extendedSortMap without falling back to sortMap\n    if (this.params.q) {\n      map.relevance = '';\n    }\n\n    const extendedMap = app.forum.attribute<any>('sortOrderToggleExtendedMap') || {};\n\n    for (let sortParam in extendedMap) {\n      map[sortParam] = extendedMap[sortParam];\n    }\n\n    return map;\n  };\n\n  // Use our new extended map for the frontend-to-REST map\n  // If the sort cannot be explicitly found (when no sort parameter is provided) we will keep the default behaviour\n  // We shouldn't re-implement the default here because our extendedSortMap is not sorted and the first option in our list might not be the same as in sortMap\n  extend(DiscussionListState.prototype, 'requestParams', function (this: DiscussionListState, params: any) {\n    const extendedApiSort = this.params.sort && this.extendedSortMap()[this.params.sort];\n\n    if (extendedApiSort) {\n      params.sort = extendedApiSort;\n    }\n  });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","sort","startsWith","substring","SortDirectionToggler","view","sortDirection","this","getSortDirection","class","classList","active","isExtendedSortField","disabled","oppositeFrontendSort","onclick","toggleSortDirection","app","icon","getApiSort","apiSort","values","newApiSort","apiSortReverse","sortMap","newFrontendSort","sortParam","Component","SortDropdown","sortOptions","keys","reduce","acc","sortId","activeSortFrontendKey","label","map","mappingInExtended","reverse","console","warn","Dropdown","buttonClassName","accessibleToggleLabel","Button","components","extend","IndexPage","items","has","add","setContent","DiscussionListState","params","q","relevance","extendedMap","extendedApiSort","extendedSortMap"],"sourceRoot":""}